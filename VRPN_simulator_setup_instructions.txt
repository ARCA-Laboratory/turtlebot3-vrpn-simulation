
# Setup Guide for Simulating OptiTrack VRPN with ROS Melodic on WSL (Windows Subsystem for Linux)

## Prerequisites
- **ROS Melodic** and **Gazebo** are installed on your WSL machine.
- **X server** set up on Windows (e.g., VcXsrv or Xming) to run graphical applications (like RViz and Gazebo).

## Steps to Configure and Simulate VRPN with ROS

### 1. Install the Simulated OptiTrack Node

1. **Clone Your Simulated VRPN Node**:
   If you have a custom simulated VRPN node (`optitrack_sim.py`), place it into your ROS workspace:

   ```bash
   mkdir -p ~/catkin_ws/src/optitrack_sim/src
   # Copy optitrack_sim.py and any other related files to this directory
   ```

2. **Build Your Workspace**:
   After adding the files, build your ROS workspace:
   ```bash
   cd ~/catkin_ws
   catkin_make
   source devel/setup.bash
   ```

### 2. Configure and Launch Simulation

1. **Create a Launch File**:
   Use the following launch file to run either the **simulated OptiTrack VRPN node** or the **real OptiTrack VRPN client**. This launch file will switch between simulation and real-world data using an argument `use_simulation`.

   ```xml
   <launch>
     <arg name="use_simulation" default="true" doc="Set to true to use the simulated OptiTrack node, false for real OptiTrack" />

     <!-- Launch Gazebo with an empty world -->
     <include file="$(find gazebo_ros)/launch/empty_world.launch">
       <arg name="world_name" value="$(find turtlebot3_gazebo)/worlds/turtlebot3_world.world"/>
       <arg name="paused" value="false"/>
       <arg name="use_sim_time" value="true"/>
       <arg name="gui" value="true"/>
       <arg name="headless" value="false"/>
     </include>

     <!-- Spawn TurtleBot3 model in Gazebo -->
     <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_burger.urdf.xacro" />
     <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" 
           args="-urdf -model turtlebot3_burger -x -2.0 -y -0.5 -z 0.0 -param robot_description" />

     <!-- Simulated VRPN Node -->
     <group if="$(arg use_simulation)">
       <node pkg="optitrack_sim" type="optitrack_sim.py" name="vrpn_sim_node" output="screen"/>
     </group>

     <!-- Static Transform from map to optitrack (for global positioning) -->
     <node pkg="tf" type="static_transform_publisher" name="map_to_optitrack" args="0 0 0 0 0 0 map optitrack 100" />
   </launch>
   ```

2. **Run the Launch File**:

   - **Simulate VRPN**:
     Run this command to use the simulated VRPN node:
     ```bash
     roslaunch optitrack_sim turtlebot_sim.launch use_simulation:=true
     ```

### 3. Test and Verify the Setup

1. **Launch RViz**:
   Open **RViz** to visualize the TF frames and verify that the robot is receiving pose updates from either the simulated or real VRPN node:
   ```bash
   rosrun rviz rviz
   ```

2. **Check ROS Topics**:
   List available ROS topics to ensure the `/vrpn/Body1/odom` or similar topic is being published:
   ```bash
   rostopic list
   ```

3. **Verify Pose Data**:
   Inspect the pose data published on the VRPN topic:
   ```bash
   rostopic echo /vrpn/Body1/odom
   ```

## Troubleshooting

1. **X Server Issues**:
   Ensure your X server on Windows (e.g., VcXsrv) is running and properly configured for graphical applications.

2. **Networking**:
   If using WSL, make sure to use your Windows machineâ€™s IP (`10.0.x.x`) instead of `127.0.0.1`.
